/**
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) Bao Project and Contributors. All rights reserved.
 */

#ifndef __VIRTIO_H__
#define __VIRTIO_H__

#include <bao.h>
#include <emul.h>
#include <list.h>
#include <vm.h>

/*!
 * @struct  virtio_device
 * @brief   Contains all the information of a VirtIO device
 */
struct virtio_device {
    uint64_t va;              // Virtual address for device MMIO register access
    size_t size;              // MMIO region size
    irqid_t virtio_interrupt; // Backend VM interrupt
    irqid_t device_interrupt; // Device interrupt
    uint64_t virtio_id;       // Unique VirtIO ID linking each frontend driver to the backend device
    int backend_vm_id;        // Holds the VM's ID hosting the backend device (Auto-generated by
                              // virtio_init)
    int frontend_vm_id;       // Holds the VM's ID hosting the frontend driver (Auto-generated by
                              // virtio_init)
    bool is_back_end;         // Specifies VirtIO backend driver presence in the VM
    bool pooling;             // Define the backend execution mode: polling or interrupt-based
    int priority; // Driver priority for backend scheduling (Higher number indicates lower priority)
    int device_type; // Identifies the actual physical device type
};

/*!
 * @fn              virtio_init
 * @brief           Responsible for VirtIO device initialization
 * @return          void
 */
void virtio_init();

/*!
 * @fn              virtio_assign_cpus
 * @brief           Assigns frontend and backend CPUs to VMs containing VirtIO instances
 * @return          void
 */
void virtio_assign_cpus(struct vm* vm);

/*!
 * @fn              virtio_hypercall
 * @brief           Handle the VirtIO hypercall
 * @note            The VirtIO hypercall is used by the backend to request or send information
 * @param   arg0    First argument of the hypercall
 * @param   arg1    Second argument of the hypercall
 * @param   arg2    Third argument of the hypercall
 * @return          unsigned long
 */
unsigned long virtio_hypercall(unsigned long arg0, unsigned long arg1, unsigned long arg2);

/*!
 * @fn                      virtio_mmio_emul_handler
 * @brief                   Manages all MMIO register accesses for a VirtIO driver
 * @param   emul_access     Structure holding details for MMIO register access
 * @return                  bool
 */
bool virtio_mmio_emul_handler(struct emul_access* emul_access);

#endif /* __VIRTIO_H__ */
